####################################################################
# version TME2 :
# TME2 exo1.3 :
# Source : ./grammar1.rnc
# Autor : Ilyas Waye <ilyas.waye@gmail.com>
# Traits ajoutés :
#   -> affectations
#   -> boucles while
#   -> blocs locaux n-aires
#   -> définition et application de fonction
####################################################################

include "grammar1.rnc"

# Extension de la grammaire précédente :
start |= programme2
expression |= affectation
expression |= invocation
instruction |= boucle
instruction |= blocLocal

# le nouveau programme prend en compte les suites de définitions
# de fonctions
programme2 = element programme2 {
   definitionFonction *,
   instructions
}

# definition d'une fonction qui a besoin d'un nom, des paramètres
# ( variables ) et un corps ( instructions )
definitionFonction = element definitionFonction {
   attribute nom { xsd:Name - ( xsd:Name { pattern = "(ilp|ILP)"} ) },
   element arguments { variable* },
   element corps { instructions }
}

# l'affectation prend une variable cible et une expression comme valeur.
# à rajouter ? += -= ...
affectation = element affectation {
   attribute nom { xsd:Name - ( xsd:Name { pattern = "(ilp|ILP)"} ) },
   element valeur { expression }
}

# boucle while
boucle = element boucle {
   element condition { expression },
   element corps { instructions }
}

# un blocLocal va définir un certain nombre ( peut être nul )
# de variables locales 
blocLocal = element blocLocal {
   element liaisons {
      element liaison {
         variable,
         element initialisation {
            expression
         }
      } *
   },
   element corps { instructions }
}

invocation = element invocation {
   element fonction { expression },
   element arguments { expression *}
}

# fin grammar1-tme2.rnc