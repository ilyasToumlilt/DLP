# -*- coding: utf-8 -*-
# ******************************************************************
# ILP - Implantation d'un langage de programmation.
# Copyright (C) 2004 <Christian.Queinnec@lip6.fr>
# $Id: grammar4.rnc 477 2006-09-29 13:23:48Z queinnec $
# GPL version>=2
# ******************************************************************

# Quatrième version du langage étudié: ILP4 pour « Incongru Langage
# Poilant ». Il sera complété dans les cours qui suivent. La grande
# nouveauté est que (à la différence de C, de Java, de JavaScript,
# etc.) toute instruction est maintenant aussi une expression. Cela
# permet de s'affranchir des différences de syntaxe entre les deux
# types d'alternatives (if-else et ?:) mais autorise le bloc local (ce
# que n'autorise pas C ni JavaScript). Le grand avantage est que cela
# simplifie le code de compilation et permet de parler plus simplement
# d'intégration de fonctions (inlining).

start =
   programme4
 | programme3
 | programme2
 | programme1

# Un programme4 est composé de définitions de fonctions globales
# suivies d'expressions les mettant en œuvre.

programme4 = element programme4 {
   definitionEtExpressions
}
programme3 = element programme3 {
   definitionEtExpressions
}
programme2 = element programme2 {
   definitionEtExpressions
}
programme1 = element programme1 {
   expression
}

definitionEtExpressions =
   definitionFonction *,
   expression

# Définition d'une fonction avec son nom, ses variables (éventuellement
# aucune) et un corps qui est une séquence d'expressions.

definitionFonction = element definitionFonction {
   attribute nom     { xsd:Name - ( xsd:Name { pattern = "(ilp|ILP)" } ) },
   element variables { variable * },
   element corps     { expression + }
}

# Les expressions possibles:

expression =
   alternative
 | sequence
 | blocUnaire
 | blocLocal
 | boucle
 | try
 | affectation
 | invocation
 | constante
 | variable
 | operation
 | invocationPrimitive

# Le si-alors-sinon. L'alternant est facultatif.

alternative = element alternative {
   element condition   { expression },
   element consequence { expression + },
   element alternant   { expression + } ?
}

# La séquence qui permet de regrouper plusieurs expressions en une seule.
# Il est obligatoire qu'il y ait au moins une expression dans la séquence.

sequence = element sequence {
   expression
}

# Le bloc local unaire. Il est conservé pour garder les tests associés.
# Mais on pourrait s'en passer au profit du blocLocal plus général.

blocUnaire = element blocUnaire {
   variable,
   element valeur { expression },
   element corps  { expression + }
}

# Un bloc local qui introduit un nombre quelconque (éventuellement nul)
# de variables locales associées à une valeur initiale (calculée avec
# une expression).

blocLocal = element blocLocal {
   element liaisons {
      element liaison {
         variable, 
         element initialisation {
            expression
         }
      } *
   },
   element corps { expression + }
}

# La boucle tant-que n'a de sens que parce que l'on dispose maintenant
# de l'affectation.

boucle = element boucle {
   element condition { expression },
   element corps     { expression + }
}

# L'affectation prend une variable en cible et une expression comme
# valeur. L'affectation est une expression.

affectation = element affectation {
   attribute nom  { xsd:Name - ( xsd:Name { pattern = "(ilp|ILP)" } ) },
   element valeur { expression }
}

# L'invocation d'une fonction définie.

invocation = element invocation {
   element fonction { expression },
   element arguments { expression * }
}


# Cette définition permet une clause catch ou une clause finally ou
# encore ces deux clauses à la fois.

try = element try {
   element corps { expression + },
   (  catch
    | finally
    | ( catch, finally )
   )
}

catch = element catch {
   attribute exception { xsd:Name - ( xsd:Name { pattern = "(ilp|ILP)" } ) },
   expression
}

finally = element finally {
   expression
}

# Une variable n'est caractérisée que par son nom. Les variables dont
# les noms comportent la séquence ilp ou ILP sont réservés et ne
# peuvent être utilisés par les programmeurs.

variable = element variable {
   attribute nom { xsd:Name - ( xsd:Name { pattern = "(ilp|ILP)" } ) },
   empty
}

# L'invocation d'une fonction primitive. Une fonction primitive est
# procurée par l'implantation et ne peut (usuellement) être définie
# par l'utilisateur. Les fonctions primitives sont, pour être
# utilisables, prédéfinies. Une fonction primitive n'est caractérisée
# que par son nom (éventuellement masquable).

invocationPrimitive = element invocationPrimitive {
   attribute fonction { xsd:Name - ( xsd:Name { pattern = "(ilp|ILP)" } ) },
   expression *
}

# Les operations sont en fait des sortes d'invocations a des fonctions
# primitives sauf que ces fonctions sont implantées par le matériel
# par des instructions particulières. On ne distingue que les
# opérations unaires et binaires (les plus usuelles):

operation =
   operationUnaire
 | operationBinaire

operationUnaire = element operationUnaire {
   attribute operateur { "-" | "!" },
   element operande { expression }
}
operationBinaire = element operationBinaire {
   element operandeGauche { expression },
   attribute operateur {
      "+" | "-" | "*" | "/" | "%" |                      # arithmétiques
      "|" | "&" | "^" |                                  # booléens
      "<" | "<=" | "==" | ">=" | ">" | "<>" | "!="        # comparaisons
   },
   element operandeDroit { expression }
}

# Les constantes sont les données qui peuvent apparaître dans les
# programmes sous forme textuelle (ou littérale comme l'on dit
# souvent). Ici l'on trouve toutes les constantes usuelles à part les
# caractères:

constante =
   element entier    {
    attribute valeur { xsd:integer },
    empty }
 | element flottant  {
    attribute valeur { xsd:float },
    empty }
 | element chaine    { text }
 | element booleen   {
    attribute valeur { "true" | "false" },
    empty }

# fin de grammar4.rnc


