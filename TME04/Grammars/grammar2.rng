<?xml version="1.0" encoding="utf-8"?>
<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <!--
    -*- coding: utf-8 -*-
    ******************************************************************
    ILP - Implantation d'un langage de programmation.
    Copyright (C) 2004 <Christian.Queinnec@lip6.fr>
    $Id: grammar2.rnc 477 2006-09-29 13:23:48Z queinnec $
    GPL version>=2
    ******************************************************************
  -->
  <!--
    Deuxième version du langage étudié: ILP2 pour « Insipide Langage
    Prévu » Il sera complété dans les cours qui suivent.
  -->
  <!--
    On étend la grammaire précédente pour accepter des programmes
    enrichis (définis par la balise programme2) et l'on modifie la
    notion d'instruction pour accepter la présence des blocs locaux.
  -->
  <include href="grammar1.rng"/>
  <start combine="choice">
    <ref name="programme2"/>
  </start>
  <define name="instruction" combine="choice">
    <ref name="blocLocal"/>
  </define>
  <define name="instruction" combine="choice">
    <ref name="boucle"/>
  </define>
  <define name="expression" combine="choice">
    <ref name="affectation"/>
  </define>
  <define name="expression" combine="choice">
    <ref name="invocation"/>
  </define>
  <!--
    Un programme est une suite de définitions de fonctions suivie
    d'instructions sauf que les instructions comportent également des
    blocs locaux (étendant la notion de bloc local unaire précédente),
    et la boucle tant-que.
  -->
  <define name="programme2">
    <element name="programme2">
      <zeroOrMore>
        <ref name="definitionFonction"/>
      </zeroOrMore>
      <ref name="instructions"/>
    </element>
  </define>
  <!--
    Définition d'une fonction avec son nom, ses variables (éventuellement
    aucune) et un corps qui est une séquence d'instructions.
    FUTUR: restreindre les noms de fonctions a ceux des variables!
  -->
  <define name="definitionFonction">
    <element name="definitionFonction">
      <attribute name="nom">
        <data type="Name">
          <except>
            <data type="Name">
              <param name="pattern">(ilp|ILP)</param>
            </data>
          </except>
        </data>
      </attribute>
      <element name="variables">
        <zeroOrMore>
          <ref name="variable"/>
        </zeroOrMore>
      </element>
      <element name="corps">
        <ref name="instructions"/>
      </element>
    </element>
  </define>
  <!--
    Un bloc local qui introduit un nombre quelconque (éventuellement nul)
    de variables locales associées à une valeur initiale (calculée avec
    une expression).
  -->
  <define name="blocLocal">
    <element name="blocLocal">
      <element name="liaisons">
        <zeroOrMore>
          <element name="liaison">
            <ref name="variable"/>
            <element name="initialisation">
              <ref name="expression"/>
            </element>
          </element>
        </zeroOrMore>
      </element>
      <element name="corps">
        <ref name="instructions"/>
      </element>
    </element>
  </define>
  <!--
    La boucle tant-que n'a de sens que parce que l'on dispose maintenant
    de l'affectation.
  -->
  <define name="boucle">
    <element name="boucle">
      <element name="condition">
        <ref name="expression"/>
      </element>
      <element name="corps">
        <ref name="instructions"/>
      </element>
    </element>
  </define>
  <!--
    L'affectation prend une variable en cible et une expression comme
    valeur. L'affectation est une expression.
    FUTUR: restreindre les noms de variables!
  -->
  <define name="affectation">
    <element name="affectation">
      <attribute name="nom">
        <data type="Name">
          <except>
            <data type="Name">
              <param name="pattern">(ilp|ILP)</param>
            </data>
          </except>
        </data>
      </attribute>
      <element name="valeur">
        <ref name="expression"/>
      </element>
    </element>
  </define>
  <!-- L'invocation d'une fonction définie. -->
  <define name="invocation">
    <element name="invocation">
      <element name="fonction">
        <ref name="expression"/>
      </element>
      <element name="arguments">
        <zeroOrMore>
          <ref name="expression"/>
        </zeroOrMore>
      </element>
    </element>
  </define>
</grammar>
<!-- fin de grammar2.rnc -->
